// Mocks generated by Mockito 5.4.6 from annotations
// in brasil_cripto/test/model/repositories/home_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:brasil_cripto/model/service/client/client_http_request.dart'
    as _i3;
import 'package:brasil_cripto/model/service/client/dio/dio_client.dart' as _i4;
import 'package:brasil_cripto/view_model/utils/secure_storage/secure_storage.dart'
    as _i6;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClientHttpRequest_1<T1> extends _i1.SmartFake
    implements _i3.ClientHttpRequest<T1> {
  _FakeClientHttpRequest_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i4.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_0(this, Invocation.getter(#dio)),
          )
          as _i2.Dio);

  @override
  _i5.Future<_i3.ClientHttpRequest<T>> delete<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #headers: headers,
              },
            ),
            returnValue: _i5.Future<_i3.ClientHttpRequest<T>>.value(
              _FakeClientHttpRequest_1<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #headers: headers,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.ClientHttpRequest<T>>);

  @override
  _i5.Future<_i3.ClientHttpRequest<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {#queryParameters: queryParameters, #headers: headers},
            ),
            returnValue: _i5.Future<_i3.ClientHttpRequest<T>>.value(
              _FakeClientHttpRequest_1<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {#queryParameters: queryParameters, #headers: headers},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.ClientHttpRequest<T>>);

  @override
  _i5.Future<_i3.ClientHttpRequest<T>> patch<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #headers: headers,
              },
            ),
            returnValue: _i5.Future<_i3.ClientHttpRequest<T>>.value(
              _FakeClientHttpRequest_1<T>(
                this,
                Invocation.method(
                  #patch,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #headers: headers,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.ClientHttpRequest<T>>);

  @override
  _i5.Future<_i3.ClientHttpRequest<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #headers: headers,
              },
            ),
            returnValue: _i5.Future<_i3.ClientHttpRequest<T>>.value(
              _FakeClientHttpRequest_1<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #headers: headers,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.ClientHttpRequest<T>>);

  @override
  _i5.Future<_i3.ClientHttpRequest<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #headers: headers,
              },
            ),
            returnValue: _i5.Future<_i3.ClientHttpRequest<T>>.value(
              _FakeClientHttpRequest_1<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #headers: headers,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.ClientHttpRequest<T>>);

  @override
  _i5.Future<_i3.ClientHttpRequest<T>> request<T>(
    String? path, {
    dynamic data,
    required String? method,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #request,
              [path],
              {
                #data: data,
                #method: method,
                #queryParameters: queryParameters,
                #headers: headers,
              },
            ),
            returnValue: _i5.Future<_i3.ClientHttpRequest<T>>.value(
              _FakeClientHttpRequest_1<T>(
                this,
                Invocation.method(
                  #request,
                  [path],
                  {
                    #data: data,
                    #method: method,
                    #queryParameters: queryParameters,
                    #headers: headers,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.ClientHttpRequest<T>>);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i6.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> write({required String? key, required String? value}) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {#key: key, #value: value}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> read({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {#key: key}),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> delete({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#key: key}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> eraseAll() =>
      (super.noSuchMethod(
            Invocation.method(#eraseAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
