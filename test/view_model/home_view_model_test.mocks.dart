// Mocks generated by Mockito 5.4.6 from annotations
// in brasil_cripto/test/view_model/home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:brasil_cripto/model/models/coin_chart_model.dart' as _i7;
import 'package:brasil_cripto/model/models/coin_model.dart' as _i6;
import 'package:brasil_cripto/model/repositories/home_repository.dart' as _i3;
import 'package:brasil_cripto/model/service/client/errors/failure.dart' as _i5;
import 'package:brasil_cripto/view_model/services/favorites_service.dart'
    as _i9;
import 'package:brasil_cripto/view_model/utils/secure_storage/secure_storage.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoinModel>>> fetchCoins({
    required String? name,
    int? page,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCoins, [], {#name: name, #page: page}),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoinModel>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CoinModel>>(
                    this,
                    Invocation.method(#fetchCoins, [], {
                      #name: name,
                      #page: page,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoinModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.CoinChartModel>> fetchChartData({
    String? coinId,
    int? days = 24,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchChartData, [], {
              #coinId: coinId,
              #days: days,
            }),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.CoinChartModel>>.value(
                  _FakeEither_0<_i5.Failure, _i7.CoinChartModel>(
                    this,
                    Invocation.method(#fetchChartData, [], {
                      #coinId: coinId,
                      #days: days,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.CoinChartModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> saveFavoriteCoinsToStorage({
    required List<_i6.CoinModel>? favoriteCoins,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveFavoriteCoinsToStorage, [], {
              #favoriteCoins: favoriteCoins,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#saveFavoriteCoinsToStorage, [], {
                  #favoriteCoins: favoriteCoins,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i8.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> write({required String? key, required String? value}) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> read({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {#key: key}),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> delete({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#key: key}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> eraseAll() =>
      (super.noSuchMethod(
            Invocation.method(#eraseAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FavoritesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesService extends _i1.Mock implements _i9.FavoritesService {
  MockFavoritesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i6.CoinModel>> get favoritesStream =>
      (super.noSuchMethod(
            Invocation.getter(#favoritesStream),
            returnValue: _i4.Stream<List<_i6.CoinModel>>.empty(),
          )
          as _i4.Stream<List<_i6.CoinModel>>);

  @override
  List<_i6.CoinModel> get favoriteCoins =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteCoins),
            returnValue: <_i6.CoinModel>[],
          )
          as List<_i6.CoinModel>);

  @override
  _i4.Future<void> loadFavorites(_i8.SecureStorage? secureStorage) =>
      (super.noSuchMethod(
            Invocation.method(#loadFavorites, [secureStorage]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> toggleFavorite(
    _i6.CoinModel? coin,
    _i3.HomeRepository? homeRepository,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [coin, homeRepository]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool isFavorite(String? coinId) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [coinId]),
            returnValue: false,
          )
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
